<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Kidddddddd 的小窝</title>
    <link>http://localhost:1313/categories/algorithm/</link>
    <description>Recent content in Algorithm on Kidddddddd 的小窝</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 24 Jan 2025 02:48:42 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>每日一题20250124-LC2944</title>
      <link>http://localhost:1313/posts/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9820250124-lc2944/</link>
      <pubDate>Fri, 24 Jan 2025 02:48:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9820250124-lc2944/</guid>
      <description>&lt;h2 id=&#34;题目信息&#34;&gt;题目信息&lt;/h2&gt;&#xA;&lt;p&gt;掌握程度: 🌟&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/minimum-number-of-coins-for-fruits/solutions/2542044/dpcong-on2-dao-onpythonjavacgo-by-endles-nux5/&#34;&gt;2944. 购买水果需要的最少金币数 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;给你一个 下标从 1 开始的 整数数组 prices ，其中 prices[i] 表示你购买第 i 个水果需要花费的金币数目。&lt;/p&gt;</description>
    </item>
    <item>
      <title>每日一题20250122</title>
      <link>http://localhost:1313/posts/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9820250122/</link>
      <pubDate>Wed, 22 Jan 2025 02:33:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9820250122/</guid>
      <description>&lt;h2 id=&#34;题目信息&#34;&gt;题目信息&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/maximum-number-of-coins-you-can-get/description/&#34;&gt;1561. 你可以获得的最大硬币数目 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;有 3n 堆数目不一的硬币，你和你的朋友们打算按以下方式分硬币：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;每一轮中，你将会选出 任意 3 堆硬币（不一定连续）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Alice 将会取走硬币数量最多的那一堆。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;你将会取走硬币数量第二多的那一堆。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Bob 将会取走最后一堆。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;重复这个过程，直到没有更多硬币。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;给你一个整数数组 piles ，其中 piles[i] 是第 i 堆中硬币的数目。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;返回你可以获得的最大硬币数目。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;示例 1：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输入：piles = [2,4,1,2,7,8]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输出：9&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解释：选出 (2, 7, 8) ，Alice 取走 8 枚硬币的那堆，你取走 7 枚硬币的那堆，Bob 取走最后一堆。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;选出 (1, 2, 4) , Alice 取走 4 枚硬币的那堆，你取走 2 枚硬币的那堆，Bob 取走最后一堆。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;你可以获得的最大硬币数目：7 + 2 = 9.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;考虑另外一种情况，如果选出的是 (1, 2, 8) 和 (2, 4, 7) ，你就只能得到 2 + 4 = 6 枚硬币，这不是最优解。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;示例 2：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输入：piles = [2,4,5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输出：4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;示例 3：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输入：piles = [9,8,7,6,5,1,2,3,4]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;输出：18&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;提示：&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;3 &amp;lt;= piles.length &amp;lt;= 10^5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;piles.length % 3 == 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1 &amp;lt;= piles[i] &amp;lt;= 10^4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;解题思路&#34;&gt;解题思路&lt;/h2&gt;&#xA;&lt;p&gt;第一个思路是按顺序取，维护一个大顶堆，一轮取 3 个，自己每次取第二个，实现完以后，第三个 case 没过，仔细看了一下题目，漏掉了第一个命题&lt;/p&gt;</description>
    </item>
    <item>
      <title>算法日记-03</title>
      <link>http://localhost:1313/posts/%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0-03/</link>
      <pubDate>Mon, 06 Jan 2025 17:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E7%AE%97%E6%B3%95%E6%97%A5%E8%AE%B0-03/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;回溯算法中的排列与组合&lt;/p&gt;&#xA;&lt;h2 id=&#34;框架模板&#34;&gt;框架模板&lt;/h2&gt;&#xA;&lt;p&gt;回溯算法在解决排列和组合问题时，两者的主要区别在于元素的顺序是否重要，以及结果中是否允许重复选取相同元素。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;排列 (Permutation)&lt;/li&gt;&#xA;&lt;li&gt;顺序重要：在排列中，元素的顺序会影响结果。例如，[1, 2] 和 [2, 1] 被视为不同的排列。&lt;/li&gt;&#xA;&lt;li&gt;典型问题：求数组的全排列、给定数列的不同排列方式等。&lt;/li&gt;&#xA;&lt;li&gt;特点：需要考虑每个元素在每个位置的可能性，通常通过标记来避免重复选取已使用的元素。&lt;/li&gt;&#xA;&lt;li&gt;组合 (Combination)&lt;/li&gt;&#xA;&lt;li&gt;顺序不重要：在组合中，元素的顺序不影响结果。例如，[1, 2] 和 [2, 1] 被视为相同的组合。&lt;/li&gt;&#xA;&lt;li&gt;典型问题：求数组的所有子集、选出若干个元素的组合等。&lt;/li&gt;&#xA;&lt;li&gt;特点：只需要关心某个元素是否被选中，不需要考虑顺序，通常可以通过限制递归的起始位置来避免重复组合。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;排列代码模板&lt;/p&gt;</description>
    </item>
    <item>
      <title>刷题日记-02</title>
      <link>http://localhost:1313/posts/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-02/</link>
      <pubDate>Mon, 06 Jan 2025 15:12:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-02/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;滑动窗口的一种算法模板&lt;/p&gt;&#xA;&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;&#xA;&lt;p&gt;滑动窗口的一种算法模板&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//外层循环扩展右边界，内层循环扩展左边界&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//当前考虑的元素&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&#x9;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//区间[left,right]不符合题意&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//扩展左边界&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//区间[left,right]符合题意，统计相关信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-dot-无重复字符的最长子串&#34;&gt;3. 无重复字符的最长子串&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/&#34;&gt;3. 无重复字符的最长子串 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>刷题日记-01</title>
      <link>http://localhost:1313/posts/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-01/</link>
      <pubDate>Thu, 19 Dec 2024 22:44:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-01/</guid>
      <description>&lt;h2 id=&#34;206-dot-反转链表&#34;&gt;206.反转链表&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.cn/problems/reverse-linked-list/&#34;&gt;206. 反转链表 - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&lt;/p&gt;&#xA;&lt;p&gt;两种解法&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;递归&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;递归的函数可以看成一个已经实现了的函数 &lt;code&gt;reverse&lt;/code&gt; ，我们通过两个节点，一个是 &lt;code&gt;pre&lt;/code&gt; 一个 &lt;code&gt;cur&lt;/code&gt; ，反转链表其实是交换了两个节点连接的指向，我们在递归函数中，只翻转单相的连接就行，就是先 反转cur 跟 pre ，然后把反转后的 cur 跟 next 在进行反转，这是后序的操作逻辑&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 0 构造一个 BST</title>
      <link>http://localhost:1313/posts/%E4%BB%8E-0-%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA-bst/</link>
      <pubDate>Wed, 27 Nov 2024 16:48:55 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E4%BB%8E-0-%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA-bst/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;BST 二叉搜索树，是一颗二叉树，其中的每个节点的值，都大于 &lt;strong&gt;左子树的任意节点&lt;/strong&gt; 而小于 &lt;strong&gt;右子树的任意节点&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本结构&#34;&gt;基本结构&lt;/h2&gt;&#xA;&lt;p&gt;BST 是一个数据形态相对特殊的二叉树，二叉树本质是一种特化的链表结构，同时持有左右两个节点的指针，是一种天然的递归结构，&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
